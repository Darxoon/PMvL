#import enemy/22_BonyBeetle.bpat
#import enemy/16_LavaBubble.bpat

#new:Function $Function_PlayExplosionFX
{
    0:  ADDIU     SP, SP, FFC8
    4:  SW        S1, 14 (SP)
    8:  COPY      S1, A0
    C:  SW        RA, 20 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S0, 10 (SP)
   1C:  SDC1      F22, 30 (SP)
   20:  SDC1      F20, 28 (SP)
   24:  LW        S0, C (S1)
   28:  LW        A1, 0 (S0)
   2C:  JAL       ~Func:get_variable
   30:  ADDIU     S0, S0, 4
   34:  LW        A1, 0 (S0)
   38:  ADDIU     S0, S0, 4
   3C:  COPY      A0, S1
   40:  JAL       ~Func:get_variable
   44:  COPY      S3, V0
   48:  COPY      A0, S1
   4C:  LW        A1, 0 (S0)
   50:  JAL       ~Func:get_variable
   54:  COPY      S0, V0
   58:  MTC1      S3, F20
   5C:  NOP
   60:  CVT.S.W   F20, F20
   64:  COPY      S2, V0
   68:  MTC1      S2, F22
   6C:  NOP
   70:  CVT.S.W   F22, F22
   74:  MTC1      S0, F0
   78:  NOP
   7C:  CVT.S.W   F0, F0
   80:  MFC1      A1, F20
   84:  MFC1      A3, F22
   88:  MFC1      A2, F0
   8C:  JAL       ~Func:playFX_17
   90:  CLEAR     A0
   94:  LAH       V1, 800DC1EC
   9C:  LI        V0, 93
   A0:  BEQ       V1, V0, .o120
   A4:  SLTI      V0, V1, 94
   A8:  BEQ       V0, R0, .oC0
   AC:  LI        V0, 92
   B0:  BEQ       V1, V0, .oD4
   B4:  NOP
   B8:  BEQ       R0, R0, .o1D0
   BC:  NOP
        .oC0
   C0:  LI        V0, 94
   C4:  BEQ       V1, V0, .o178
   C8:  NOP
   CC:  BEQ       R0, R0, .o1D0
   D0:  NOP
        .oD4
   D4:  LW        V0, AC (S1)
   D8:  BLEZ      V0, .o100
   DC:  ADDIU     V0, S0, 14
   E0:  MTC1      V0, F0
   E4:  NOP
   E8:  CVT.S.W   F0, F0
   EC:  MFC1      A1, F20
   F0:  MFC1      A3, F22
   F4:  MFC1      A2, F0
   F8:  BEQ       R0, R0, .o208
   FC:  LI        A0, 1
        .o100
  100:  MTC1      V0, F0
  104:  NOP
  108:  CVT.S.W   F0, F0
  10C:  MFC1      A1, F20
  110:  MFC1      A3, F22
  114:  MFC1      A2, F0
  118:  BEQ       R0, R0, .o208
  11C:  CLEAR     A0
        .o120
  120:  LW        V0, AC (S1)
  124:  BLEZ      V0, .o14C
  128:  ADDIU     V0, S0, 14
  12C:  MTC1      V0, F0
  130:  NOP
  134:  CVT.S.W   F0, F0
  138:  MFC1      A1, F20
  13C:  MFC1      A3, F22
  140:  MFC1      A2, F0
  144:  BEQ       R0, R0, .o168
  148:  LI        A0, 1
        .o14C
  14C:  MTC1      V0, F0
  150:  NOP
  154:  CVT.S.W   F0, F0
  158:  MFC1      A1, F20
  15C:  MFC1      A3, F22
  160:  MFC1      A2, F0
  164:  CLEAR     A0
        .o168
  168:  JAL       ~Func:playFX_19
  16C:  NOP
  170:  BEQ       R0, R0, .o214
  174:  LI        A0, 2017
        .o178
  178:  LW        V0, AC (S1)
  17C:  BLEZ      V0, .o1A4
  180:  ADDIU     V0, S0, 14
  184:  MTC1      V0, F0
  188:  NOP
  18C:  CVT.S.W   F0, F0
  190:  MFC1      A1, F20
  194:  MFC1      A3, F22
  198:  MFC1      A2, F0
  19C:  BEQ       R0, R0, .o1C0
  1A0:  LI        A0, 2
        .o1A4
  1A4:  MTC1      V0, F0
  1A8:  NOP
  1AC:  CVT.S.W   F0, F0
  1B0:  MFC1      A1, F20
  1B4:  MFC1      A3, F22
  1B8:  MFC1      A2, F0
  1BC:  LI        A0, 1
        .o1C0
  1C0:  JAL       ~Func:playFX_19
  1C4:  NOP
  1C8:  BEQ       R0, R0, .o214
  1CC:  LI        A0, 2017
        .o1D0
  1D0:  MTC1      S3, F0
  1D4:  NOP
  1D8:  CVT.S.W   F0, F0
  1DC:  ADDIU     V0, S0, 14
  1E0:  MFC1      A1, F0
  1E4:  MTC1      V0, F0
  1E8:  NOP
  1EC:  CVT.S.W   F0, F0
  1F0:  MFC1      A2, F0
  1F4:  MTC1      S2, F0
  1F8:  NOP
  1FC:  CVT.S.W   F0, F0
  200:  MFC1      A3, F0
  204:  CLEAR     A0
        .o208
  208:  JAL       ~Func:playFX_19
  20C:  NOP
  210:  LI        A0, 2016
        .o214
  214:  JAL       ~Func:sfx_play_sound
  218:  NOP
  21C:  LW        RA, 20 (SP)
  220:  LW        S3, 1C (SP)
  224:  LW        S2, 18 (SP)
  228:  LW        S1, 14 (SP)
  22C:  LW        S0, 10 (SP)
  230:  LDC1      F22, 30 (SP)
  234:  LDC1      F20, 28 (SP)
  238:  LI        V0, 2
  23C:  JR        RA
  240:  ADDIU     SP, SP, 38
}

% Luigi (Actor)

#define .Animation:Sitting 00820007
#define .Animation:Idle 00820008
#define .Animation:Running 0082000A
#define .Animation:AboutToJump 0082000C
#define .Animation:Jumping 0082000D
#define .Animation:Falling 0082000E
#define .Animation:Hit 0082000F
#define .Animation:OpeningLetter 00820018
#define .Animation:ReadingLetter 00820019
#define .Animation:Hurt 00820020
#define .Animation:LookingUp 00820021

#define .Animation:MegaMushroom 0082001F

#new:Actor $Luigi
{
	% stats
	[Index]         D4b
	[Level]         40`b
	[MaxHP]         30`b
	[Coins]         1`b
	[Flags]       00000000
	[StatusTable] $StatusTable_8021975C
	% ai
	[PartsCount]    3`s
	[PartsTable]  $PartsTable_Luigi
	[Script]      $Script_Init_Luigi
	% move effectiveness
	[Escape]       90`b
	[Item]        100`b
	[AirLift]     100`b
	[Hurricane]    0`b % Bow's "Spook" as well
	[UpAndAway]    95`b
	[PowerBounce] 76`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         24`b  24`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:PartsTable $PartsTable_Luigi {
	00800000 01000000 002C00FF $IdleAnimations_Luigi $DefenseTable_Luigi 00000000 00000000 00F60000 00000000
	00120001 02000000 001800FF $IdleAnimations_Projectile $DefenseTable_Projectile 00000000 00000000 FFF60000 00000000
	00120001 03000000 001800FF $IdleAnimations_Projectile $DefenseTable_Projectile 00000000 00000000 FFF60000 00000000
}

#new:IdleAnimations $IdleAnimations_Luigi {
	.Status:Normal    .Animation:Idle
	.Status:Sleep     00820003
	.Status:End
}

#new:IdleAnimations $IdleAnimations_Luigi_Shuffle {
	.Status:Normal    .Animation:Running
	.Status:End
}

#new:DefenseTable $DefenseTable_Luigi {
	.Element:Normal 00000000
	.Element:Throw  FFFFFFFD
	.Element:End
}

#new:IdleAnimations $IdleAnimations_Projectile {
	.Status:Normal    00820027
	.Status:End
}

#new:DefenseTable $DefenseTable_Projectile {
	.Element:Normal 00000000
	.Element:Shock  00000000
	.Element:End
}

#new:Script $Script_Init_Luigi {
	Call BindTakeTurn ( .Actor:Self $Script_TakeTurn_Luigi )
	Call BindIdle ( .Actor:Self $Script_Idle_Luigi )
	Call BindNextTurn ( .Actor:Self $Script_NextTurn_Luigi )
	Call BindHandleEvent ( .Actor:Self $Script_HandleEvent_Luigi )
	
	Call SetActorVar ( .Actor:Self 0` 0` ) % Var 0: next attack - 0`: jump, 1`: thunder
	Call SetActorVar ( .Actor:Self 1` .False ) % Var 1: held speech at very start - .False, .True
	Return
	End
}

#new:Script $Script_NextTurn_Luigi {
	Call GetActorVar ( .Actor:Self 1` *Var0 )
	If *Var0 == .False
		Call ActorSpeak ( 002F0001 .Actor:Self 1` 00820014 00820004 )
		Call SetActorVar ( .Actor:Self 1` .True )
	EndIf
	Return
	End
}

#new:Script $Script_TakeTurn_Luigi {
	Call GetActorVar ( .Actor:Self 0` *Var0 )
	
	If *Var0 == 0`
		Call SetActorVar ( .Actor:Self 0` 1` )
		ExecWait $Script_Luigi_Jump
	Else
		Call SetActorVar ( .Actor:Self 0` 0` )
		ExecWait $Script_Luigi_Thunder
	EndIf
	Return
	End
}

#new:Script $Script_Luigi_Jump {
	Call UseIdleAnimation  ( .Actor:Self .False )
	Call EnableIdleScript  ( .Actor:Self 00000000 )
	Call SetTargetActor    ( .Actor:Self .Actor:Player )
	Call UseBattleCamPreset    ( 0000003F )
	Call BattleCamTargetActor  ( .Actor:Self )
	Call 8024ECF8  ( FFFFFFFF 00000001 00000000 )
	
	% Running towards player
	Call SetAnimation      ( .Actor:Self 00000001 .Animation:Running )
	Call SetGoalToTarget   ( .Actor:Self )
	Call AddGoalPos        ( .Actor:Self  50`  0`  0` )
	Call SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
	Call RunToGoal ( .Actor:Self  0` .False )
	Call SetAnimation      ( .Actor:Self 00000001 .Animation:AboutToJump )
	Call SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFF 00000000 )
	Wait 1`
	Call SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
	Wait 5`
	Call SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
	
	% Jump
	Call SetAnimation      ( .Actor:Self 00000001 .Animation:Jumping )
	Call EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
	Set *MB_debug 3`
	Switch  *Var0
		CaseOR  ==  .HitResult:Miss % 6
		CaseOR  ==  .HitResult:Lucky % 5
			Set   *VarA  *Var0
			Call  SetGoalToTarget   ( .Actor:Self )
			Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
			Sub   *Var0  0000000A
			Set   *Var1  0000000A
			Add   *Var2  00000003
			Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
			Thread
				Wait  6`
				Call  SetAnimation  ( .Actor:Self 00000001 00260004 )
			EndThread
			Call  JumpToGoal    ( .Actor:Self  16` .False .True .False )
			Call  SetAnimation  ( .Actor:Self 00000001 00260008 )
			Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
			Call  SetActorDispOffset    ( .Actor:Self 00000000 00000005 00000000 )
			Wait  1`
			Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
			Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
			Wait  1`
			Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
			Call  SetActorDispOffset    ( .Actor:Self 00000000 00000007 00000000 )
			Call  SetAnimation  ( .Actor:Self 00000001 00260005 )
			Wait  5`
			If  *VarA  ==  .HitResult:Lucky % 5
				Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
			EndIf
			Wait  5`
			Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
			Call  SetAnimation      ( .Actor:Self 00000001 00260004 )
			Call  SetGoalToTarget   ( .Actor:Self )
			Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
			Add   *Var0  00000014
			Set   *Var1  00000000
			Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
			Thread
				Wait  4`
				Set   *Var0  000000B4
				Loop  00000004
					Sub   *Var0  0000002D
					Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
					Wait  1`
				EndLoop
				Call  SetAnimation  ( .Actor:Self 00000001 00260004 )
			EndThread
			Call  JumpToGoal        ( .Actor:Self  15` .False .True .False )
			Call  SetAnimation      ( .Actor:Self 00000001 00260007 )
			Wait  5`
			Call  UseBattleCamPreset    ( 00000002 )
			Call  YieldTurn ( )
			Call  SetActorYaw       ( .Actor:Self  180` )
			Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetGoalToHome     ( .Actor:Self )
			Call  SetActorSpeed     ( .Actor:Self *Fixed[8.0] )
			Call  RunToGoal ( .Actor:Self  0` .False )
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
			Call  SetActorYaw       ( .Actor:Self  0` )
			Wait  5`
			Call  SetAnimation      ( .Actor:Self 00000001 00260001 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
			Call  JumpToGoal        ( .Actor:Self  5` .False .True .False )
			Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
			Call  EnableIdleScript  ( .Actor:Self 00000001 )
			Call  UseIdleAnimation  ( .Actor:Self .True )
			Return
		EndCaseGroup
		Default
			Call  SetGoalToTarget       ( .Actor:Self )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
			Thread
				Wait  6`
				Call  SetAnimation  ( .Actor:Self 00000001 .Animation:Falling )
			EndThread
			Call  JumpToGoal    ( .Actor:Self  16` .False .True .False )
			
			% Hit Mario
			Call  SetAnimation  ( .Actor:Self 00000001 .Animation:AboutToJump )
			Wait  2`
	EndSwitch
	Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000001 00000020 )
	Switch  *Var0
		CaseOR  ==  .HitResult:Hit % 0
		CaseOR  ==  .HitResult:QuakeImmune % 2
			Call  UseBattleCamPreset    ( 00000002 )
			Wait  2`
			
			% Rebounding & Bounce
			Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
			Call  SetAnimation  ( .Actor:Self 00000001 .Animation:Idle )
			Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
			Add   *Var0  00000028
			Set   *Var1  00000000
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
			Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
			Add   *Var0  0000001E
			Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  JumpToGoal    ( .Actor:Self  8` .False .True .False )
			Add   *Var0  00000014
			Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  JumpToGoal    ( .Actor:Self  6` .False .True .False )
			Call  SetAnimation  ( .Actor:Self 00000001 00820004 )
			Wait  3`
			Call  YieldTurn ( )
			
			% Run back
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetAnimation  ( .Actor:Self 00000001 .Animation:Running )
			Call  SetGoalToHome ( .Actor:Self )
			Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
			Call  RunToGoal     ( .Actor:Self  0` .False )
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
		EndCaseGroup
	EndSwitch
	Call  EnableIdleScript  ( .Actor:Self 00000001 )
	Call  UseIdleAnimation  ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_Luigi_Thunder {
	% Preparation
	Call UseIdleAnimation ( .Actor:Self .False )
	Call EnableIdleScript ( .Actor:Self .False )
	Call SetTargetActor    ( .Actor:Self .Actor:Player )
	Call UseBattleCamPreset    ( 0000003F )
	Call BattleCamTargetActor  ( .Actor:Self )
	
	% Reading Animation & Spawning Spheres
	Call SetAnimation ( .Actor:Self 1` .Animation:OpeningLetter )
	Wait 16`
	Call SetAnimation ( .Actor:Self 1` .Animation:ReadingLetter )
	
	Thread
		Wait 9`
		Call GetActorPos       ( .Actor:Self *VarA *VarB *VarC )
		Add *VarB 30`
		Call SetPartPos        ( .Actor:Self 2` *VarA *VarB *VarC )
		Call SetPartFlagBits   ( .Actor:Self 2` 1` .False )
		Call SetPartScale ( .Actor:Self 2` *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
		
		Sub *VarA 15`
		Add *VarB 40`
		Call FlyPartTo ( .Actor:Self 2` *VarA *VarB *VarC 20` 0` .Easing:CubicOut )
	EndThread
	Thread
		Wait 19`
		Call GetActorPos       ( .Actor:Self *VarA *VarB *VarC )
		Add *VarB 30`
		Call SetPartPos        ( .Actor:Self 3` *VarA *VarB *VarC )
		Call SetPartFlagBits   ( .Actor:Self 3` 1` .False )
		Call SetPartScale ( .Actor:Self 3` *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
		
		Add *VarA 15`
		Add *VarB 40`
		Call FlyPartTo ( .Actor:Self 3` *VarA *VarB *VarC 20` 0` .Easing:CubicOut )
	EndThread
	Wait 30`
	
	Call SetAnimation ( .Actor:Self 1` .Animation:AboutToJump )
	Wait 30`
	
	% Throw Projectiles
	Call SetGoalToTarget ( .Actor:Self )
	Call GetGoalPos ( .Actor:Self *VarA *VarB *VarC )
	
	Thread
		Wait 14`
		
		% Second Projectile
		Call SetPartMoveSpeed ( .Actor:Self 3` *Fixed[12.0] )
		Call SetPartJumpGravity ( .Actor:Self 3` *Fixed[0.001953125] )
		Call JumpPartTo ( .Actor:Self 3` *VarA *VarB *VarC  0` .True )
		
		Wait 2`
		Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 00000002 00000020 )
		
		Switch *Var0
			CaseOR  ==  .HitResult:Hit % 0
			CaseOR  ==  .HitResult:QuakeImmune % 2
				Call GetPartOffset     ( .Actor:Self 3` *Var0 *Var1 *Var2 )
				Sub *Var0  00000064
				Call SetPartJumpGravity    ( .Actor:Self 3` *Fixed[0.7] )
				Call JumpPartTo        ( .Actor:Self 3` *Var0  0` *Var2  30` .True )
				Call SetPartFlagBits   ( .Actor:Self 3` 00000001 .True )
				Call YieldTurn ( )
			EndCaseGroup
		EndSwitch
	EndThread
	
	% First Projectile
	Call SetPartMoveSpeed ( .Actor:Self 2` *Fixed[12.0] )
	Call SetPartJumpGravity ( .Actor:Self 2` *Fixed[0.001953125] )
	Call JumpPartTo ( .Actor:Self 2` *VarA *VarB *VarC  0` .True )
	
	Wait 2`
	Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 00000002 00000020 )
	
	Switch *Var0
		CaseOR  ==  .HitResult:Hit % 0
		CaseOR  ==  .HitResult:QuakeImmune % 2
			Call GetPartOffset     ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
			Sub *Var0  00000064
			Call SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.7] )
			Call JumpPartTo        ( .Actor:Self 00000002 *Var0  0` *Var2  30` .True )
			Call SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
		EndCaseGroup
	EndSwitch
	
	Call EnableIdleScript ( .Actor:Self 00000001 )
	Call UseIdleAnimation ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_Idle_Luigi {
	Label  A
	Call  RandInt   ( 00000050 *Var0 )
	Add   *Var0  00000050
	Loop  *Var0
		Label  0
		Call  GetStatusFlags    ( .Actor:Self *Var1 )
		If  *Var1  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
			Wait  1`
			Goto  0
		EndIf
		Wait  1`
	EndLoop
	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
	Add   *Var0  00000005
	Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_Luigi_Shuffle )
	Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
	Call  IdleRunToGoal     ( .Actor:Self  0` )
	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_Luigi )
	Loop  00000014
		Label  1
		Call  GetStatusFlags    ( .Actor:Self *Var1 )
		If  *Var1  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
			Wait  1`
			Goto  1
		EndIf
		Wait  1`
	EndLoop
	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
	Sub   *Var0  00000005
	Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_Luigi_Shuffle )
	Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
	Call  IdleRunToGoal     ( .Actor:Self  0` )
	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_Luigi )
	Loop  00000050
		Label  2
		Call  GetStatusFlags    ( .Actor:Self *Var1 )
		If  *Var1  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
			Wait  1`
			Goto  2
		EndIf
		Wait  1`
	EndLoop
	Goto  A
	Return
	End
}

#new:Vector3D $Vector3D_Home0
{
	205` 0` -20`
}

#new:Vector3D $Vector3D_Home1
{
	245` 0` -5`
}

#new:SpecialFormation $SpecialFormation_BonyBeetle0
{
	$22_BonyBeetle $Vector3D_Home0 12` 00000000 00000000 00000000 00000000
}

#new:SpecialFormation $SpecialFormation_BonyBeetle1
{
	$22_BonyBeetle $Vector3D_Home1 11` 00000000 00000000 00000000 00000000
}

#new:Script $Script_HandleEvent_Luigi {
	Call  UseIdleAnimation  ( .Actor:Self .False )
	Call  EnableIdleScript  ( .Actor:Self 00000000 )
	Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	Call  GetLastEvent      ( .Actor:Self *Var0 )
	Switch  *Var0
		CaseOR  ==  .Event:HitCombo % 9
		CaseOR  ==  .Event:Hit % A
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Hit
			ExecWait  DoNormalHit
		EndCaseGroup
		Case  ==  .Event:BurnHit % E
			SetConst  *Var0  00000001
			SetConst  *Var1  00820022
			SetConst  *Var2  00820022
			ExecWait  DoBurnHit
		Case  ==  .Event:BurnDeath % 24
			SetConst  *Var0  00000001
			SetConst  *Var1  00820022
			SetConst  *Var2  00820022
			ExecWait  DoBurnHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00820023
			ExecWait  $Script_Luigi_Death
			Return
		Case  ==  .Event:SpinSmashHit % B
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoSpinSmashHit
		Case  ==  .Event:SpinSmashDeath % 21
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoSpinSmashHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260006
			ExecWait  $Script_Luigi_Death
			Return
		Case  ==  .Event:ShockHit % 2F
			SetConst  *Var0  00000001
			SetConst  *Var1  0026000E
			ExecWait  DoShockHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoJumpBack
			Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetAnimation  ( .Actor:Self 00000001 00260007 )
			Call  SetGoalToHome ( .Actor:Self )
			Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
			Call  RunToGoal     ( .Actor:Self  0` .False )
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
			Wait  5`
			Call  SetAnimation  ( .Actor:Self 00000001 00260001 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
			Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
		Case  ==  .Event:ShockDeath % 26
			SetConst  *Var0  00000001
			SetConst  *Var1  0026000E
			ExecWait  DoShockHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260006
			ExecWait  DoDeath
			Return
		Case  ==  .Event:StarBeam % 13
		CaseOR  ==  00000017 % 17
		CaseOR  ==  .Event:Immune % 19
		CaseOR  ==  .Event:AirLiftFailed % 1F
			SetConst  *Var0  00000001
			SetConst  *Var1  00260001
			ExecWait  DoImmune
		EndCaseGroup
		Case  ==  .Event:Death % 20
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Hit
			ExecWait  DoNormalHit
			Wait  10`
			Call ActorSpeak ( 002F0002 .Actor:Self 1` 00820014 00820004 )
			Wait 10`
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Hurt
			ExecWait $Script_Luigi_Death
			Return
		Case  ==  .Event:EndFirstStrike % 35
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetAnimation  ( .Actor:Self 00000001 00260003 )
			Call  SetGoalToHome ( .Actor:Self )
			Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
			Call  RunToGoal     ( .Actor:Self  0` .False )
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
			Call  HPBarToHome   ( .Actor:Self )
		Case  ==  .Event:RecoverStatus % 31
			SetConst  *Var0  00000001
			SetConst  *Var1  00260001
			ExecWait  DoRecover
		Case  ==  .Event:ScareAway % 39
			SetConst  *Var0  00000001
			SetConst  *Var1  00260003
			SetConst  *Var2  00260005
			ExecWait  DoScareAway
			Return
		Case  ==  .Event:BeginAirLift % 3A
			SetConst  *Var0  00000001
			SetConst  *Var1  00260003
			ExecWait  DoAirLift
		Case  ==  .Event:BlowAway % 16
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoBlowAway
			Return
		Default
	EndSwitch
	Call  SetAnimation      ( .Actor:Self 00000001 00260001 )
	Call  EnableIdleScript  ( .Actor:Self 00000001 )
	Call  UseIdleAnimation  ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_Luigi_Death {
	ExecWait  8029AF08 % DoDeath without remove - or EVS_Enemy_DeathWithoutRemove in decomp
	
	% Make luigi have a seizure (idk why this happens but it's funny)
	% Call MakeLerp ( 230` 0` 300` .Easing:Linear )
	% Loop
	% 	Call  UpdateLerp ( )
	% 	Call GetActorPos ( .Actor:Self *VarA *VarB *VarC )
	% 	Call SetActorPos ( .Actor:Self *VarA *Var0 *VarC )
	% 	Wait  1`
	% 	If  *Var1  ==  .False 
	% 		BreakLoop
	% 	EndIf
	% EndLoop
	
	Call UseBattleCamPreset ( 2` ) % because 2` = default for some reason
	
	Wait 20`
	
	Call UseIdleAnimation ( .Actor:Partner .False )
	Call ActorSpeak ( 002F0003 .Actor:Partner 1` 000D0004 000D0001 )
	Call UseIdleAnimation ( .Actor:Partner .True )
	
	Wait 120`
	
	% Prepare ghost luigi descend (for real this time)
	Call AddActorPos ( .Actor:Enemy1 -200` 0` 0` )
	Call GetActorPos ( .Actor:Enemy1 *VarA *VarB *VarC )
	Call SetGoalPos ( .Actor:Enemy1 *VarA *VarB *VarC )
	Call AddActorPos ( .Actor:Enemy1 0` 200` 0` )
	Call SetPartFlagBits   ( .Actor:Self 1` 20001 .True )
	Call SetPartFlagBits   ( .Actor:Enemy1 1` 20001 .False )
	Call UseIdleAnimation ( .Actor:Enemy1 .False )
	Call EnableIdleScript ( .Actor:Enemy1 .False )
	
	% Make Mario emote
	Wait 20`
	Call PlaySoundAtActor  ( .Actor:Player 00000263 )
	Call GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
	Add *Var1  00000014
	Call PlayEffect        ( ~FX:EmoteIcon:Question 00000000 *Var0 *Var1 *Var2 20` 315` 30` 0` 0` 00000000 00000000 00000000 )
	
	Wait 30`
	
	Call ActorSpeak ( 002F0004 .Actor:Enemy1 1` .Animation:Idle .Animation:Idle ) % Luigi is offscreen so animations don't really matter
	
	% Make luigi descend (for real this time)
	Wait 60`
	Call FlyToGoal ( .Actor:Enemy1 200` 0` .Easing:Linear )
	Call GetActorVar ( .Actor:Enemy1 1` *Var0 )
	
	Wait 15`
	Call ActorSpeak ( 002F0005 .Actor:Enemy1 1` 00820014 .Animation:Idle )
	
	% Spawn in Bony Beetles
	Call SummonEnemy ( $SpecialFormation_BonyBeetle1 0` )
	Call SummonEnemy ( $SpecialFormation_BonyBeetle0 0` )
	
	Call GetActorPos ( .Actor:Enemy2 *VarA *VarB *VarC)
	Sub *VarA 200`
	Call SetGoalPos ( .Actor:Enemy2 *VarA *VarB *VarC )
	Call SetHomePos ( .Actor:Enemy2 *VarA *VarB *VarC )
	Call HPBarToHome ( .Actor:Enemy2 )
	
	Call GetActorPos ( .Actor:Enemy3 *VarA *VarB *VarC)
	Sub *VarA 200`
	Call SetGoalPos ( .Actor:Enemy3 *VarA *VarB *VarC )
	Call SetHomePos ( .Actor:Enemy3 *VarA *VarB *VarC )
	Call HPBarToHome ( .Actor:Enemy3 )
	
	Thread
		Call SetActorSpeed ( .Actor:Enemy3 *Fixed[8.0] )
		Call RunToGoal ( .Actor:Enemy3 0` .False )
	EndThread
	
	Wait 1`
	Call SetActorSpeed ( .Actor:Enemy2 *Fixed[8.0] )
	Call RunToGoal ( .Actor:Enemy2 0` .False )
	
	Call CancelEnemyTurn ( 00000001 )
	Call SetActorVar ( .Actor:Enemy1 0` 1` )
	Call UseIdleAnimation ( .Actor:Enemy1 .True )
	Call EnableIdleScript ( .Actor:Enemy1 .True )
	Call RemoveActor ( .Actor:Self )
	Return
	End
}

% Ghost Luigi
#new:Actor $GhostLuigi
{
	% stats
	[Index]         D5b
	[Level]         40`b
	% [MaxHP]         30`b
	[MaxHP]         35`b
	[Coins]         1`b
	[Flags]       00000000
	[StatusTable] $StatusTable_8021975C
	% ai
	[PartsCount]    3`s
	[PartsTable]  $PartsTable_GhostLuigi
	[Script]      $Script_Init_GhostLuigi
	% move effectiveness
	[Escape]       90`b
	[Item]        100`b
	[AirLift]     100`b
	[Hurricane]    90`b % Bow's "Spook" as well
	[UpAndAway]    95`b
	[PowerBounce] 80`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         24`b  24`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:PartsTable $PartsTable_GhostLuigi {
	00820001 01000000 002C00B0 $IdleAnimations_Luigi $DefenseTable_Luigi 00000000 00000000 00F60000 00000000
	00120001 02000000 001800FF $IdleAnimations_MegaMushroom $DefenseTable_Luigi 00000000 00000000 FFF60000 00000000
	00120001 03000000 001800B0 $IdleAnimations_ThrownHammer $DefenseTable_Luigi 00000000 00000000 FFF60000 00000000
}

#new:IdleAnimations $IdleAnimations_MegaMushroom {
	.Status:Normal    .Animation:MegaMushroom
	.Status:End
}

#new:IdleAnimations $IdleAnimations_ThrownHammer {
	.Status:Normal    00820025
	.Status:End
}

#new:DefenseTable $DefenseTable_GhostLuigi_Invulnerable {
	.Element:Normal 000000FF
	.Element:Blast 000000FF
	.Element:Cosmic 000000FF
	.Element:Fire 000000FF
	.Element:Hammer 000000FF
	.Element:Ice 000000FF
	.Element:Jump 000000FF
	.Element:Magic 000000FF
	.Element:Mystery 000000FF
	.Element:Quake 000000FF
	.Element:Shock 000000FF
	.Element:Throw 000000FF
	.Element:Water 000000FF
	.Element:End
}

#new:Script $Script_Init_GhostLuigi {
	Call BindTakeTurn ( .Actor:Self $Script_TakeTurn_GhostLuigi )
	Call BindIdle ( .Actor:Self $Script_Idle_Luigi )
	Call BindNextTurn ( .Actor:Self $Script_NextTurn_GhostLuigi )
	Call BindHandleEvent ( .Actor:Self $Script_HandleEvent_GhostLuigi )
	
	Call SetActorVar ( .Actor:Self 0` 0` ) % Var 0: state - 0`: disabled, 1`: small, 2`: big
	Call SetActorVar ( .Actor:Self 1` 0` ) % Var 1: next attack - 0`: hammer/kick, 1`: jump
	
	Call AddActorPos ( .Actor:Self 200` 0` 0` )
	Call UseIdleAnimation ( .Actor:Self .False ) % enabled in Luigi's death script
	Call EnableIdleScript ( .Actor:Self .False )
	
	Return
	End
}

#new:Script $Script_TakeTurn_GhostLuigi {
	Call GetActorVar ( .Actor:Self 0` *Var0 ) % state
	Call GetActorVar ( .Actor:Self 1` *Var1 ) % next attack
	
	If *Var0 == 0` % luigi is still disabled
		Return
	EndIf
	
	If *Var1 == 0`
		If *Var0 == 1`
			ExecWait $Script_GhostLuigi_HammerThrow
		Else
			ExecWait $Script_GhostLuigi_BubbleKick
		EndIf
		
		Call SetActorVar ( .Actor:Self 1` 1` )
	Else
		If *Var0 == 1`
			Set *Var6 .False % is big luigi?
			Set *Var7 3` % Mario attack power
			Set *Var8 40` % jump height
			Set *Var9 1` % goombario damage
		Else
			Set *Var6 .True
			Set *Var7 4`
			Set *Var8 50`
			Set *Var9 2`
		EndIf
		
		ExecWait $Script_GhostLuigi_Jump
		Call SetActorVar ( .Actor:Self 1` 0` )
	EndIf
	
	Return
	End
}

#new:Script $Script_GhostLuigi_HammerThrow {
	Call UseIdleAnimation ( .Actor:Self .False )
	Call EnableIdleScript ( .Actor:Self .False )
	
	Call SetAnimation ( .Actor:Self 1` 00820024 ) % reaching back with hammer
	
	Wait 20`
	
	Call SetTargetActor ( .Actor:Self .Actor:Player )
	Call SetGoalToTarget ( .Actor:Self )
	
	Thread
		Set *Var0 0`
		Loop 32`
			Call SetPartRotation ( .Actor:Self 3` 00000000 00000000 *Var0 )
			Add *Var0 00000021
			Wait 1`
		EndLoop
	EndThread
	
	Call SetAnimation ( .Actor:Self 1` .Animation:AboutToJump )
	Call GetActorPos ( .Actor:Self *Var0 *Var1 *Var2 )
	Add *Var0 20`
	Add *Var1 34`
	Call SetPartPos ( .Actor:Self 3` *Var0 *Var1 *Var2 )
	Call SetPartFlagBits ( .Actor:Self 3` 00000001 .False )
	
	Call GetGoalPos ( .Actor:Self *Var0 *Var1 *Var2 )
	Sub *Var0 10`
	Add *Var1 12`
	
	Call SetPartMoveSpeed ( .Actor:Self 3` *Fixed[12.0] )
	Call SetPartJumpGravity ( .Actor:Self 3` *Fixed[0.5] )
	Call JumpPartTo ( .Actor:Self 3` *Var0 *Var1 *Var2 30` .True )
	
	Wait 2`
	Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 00000002 00000020 )
	
	Switch *Var0
		CaseOR  ==  .HitResult:Hit % 0
		CaseOR  ==  .HitResult:QuakeImmune % 2
			Call GetPartOffset     ( .Actor:Self 3` *Var0 *Var1 *Var2 )
			Sub *Var0  00000064
			Call SetPartJumpGravity    ( .Actor:Self 3` *Fixed[0.7] )
			Call JumpPartTo        ( .Actor:Self 3` *Var0  0` *Var2  30` .True )
			Call SetPartFlagBits   ( .Actor:Self 3` 00000001 .True )
			Call YieldTurn ( )
		EndCaseGroup
	EndSwitch
	
	Call UseIdleAnimation ( .Actor:Self .True )
	Call EnableIdleScript ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_GhostLuigi_BubbleKick {
	Call UseIdleAnimation ( .Actor:Self .False )
	Call EnableIdleScript ( .Actor:Self .False )
	
	% Select correct bubble
	Call ActorExists ( .Actor:Enemy0 *Var0 )
	If *Var0 == .True
		Set *Var4 .Actor:Enemy0
	Else
		Call ActorExists ( .Actor:Enemy2 *Var0 )
		If *Var0 == .True
			Call UseIdleAnimation ( .Actor:Enemy2 .False )
			Call EnableIdleScript ( .Actor:Enemy2 .False )
			
			Call SetActorYaw ( .Actor:Enemy2 180` )
			
			Wait 4`
			Thread
				Wait 10`
				Call SetActorYaw ( .Actor:Enemy2 0` )
			EndThread
			Call GetActorPos ( .Actor:Enemy2 00000000 *Var0 00000000 )
			Call SetGoalPos ( .Actor:Enemy2 45` *Var0 -5` ) % Home 1
			Call SetActorSpeed ( .Actor:Enemy2 *Fixed[4.0] )
			Call FlyToGoal ( .Actor:Enemy2 0` 0` .Easing:SinOut )
			
			Set *Var4 .Actor:Enemy2
		Else
			% No lava bubble prsent anymore
			Call SetAnimation ( .Actor:Self 1` 00820026 ) % sad luigi
			Wait 45`
			Call SetAnimation ( .Actor:Self 1` .Animation:Idle )
			
			Call UseIdleAnimation ( .Actor:Self .True )
			Call EnableIdleScript ( .Actor:Self .True )
			Return
		EndIf
	EndIf
	
	% Luigi spin
	Call MakeLerp ( 0` -360` 25` .Easing:Linear )
	Loop
		Call UpdateLerp ()
		Call SetActorYaw ( .Actor:Self *Var0 )
		If *Var1 != 00000001
			BreakLoop
		EndIf
		Wait 1`
	EndLoop
	
	Call SetActorYaw ( .Actor:Self 0` )
	
	% Lava bubble fly
	Call UseIdleAnimation ( *Var4 .False )
	Call EnableIdleScript ( *Var4 .False )
	
	Call SetTargetActor ( *Var4 .Actor:Player )
	Call SetGoalToTarget ( *Var4 )
	Call AddGoalPos ( *Var4 0` -18` 0` )
	
	Call SetActorSpeed ( *Var4 *Fixed[10.0] )
	Call SetActorJumpGravity ( *Var4 *Fixed[0.001953125] )
	Call JumpToGoal ( *Var4 0` .False .False .False )
	
	Wait 2`
	Call EnemyDamageTarget ( *Var4 *Var0 ~Flags:DamageType:NoContact|Fire 00000000 00000000 00000002 00000020 )
	
	Switch *Var0
		CaseOR  ==  .HitResult:Hit % 0
		CaseOR  ==  .HitResult:QuakeImmune % 2
			Call GetGoalPos ( *Var4 *Var0 0` *Var2 )
			Call SetGoalPos ( *Var4 *Var0 0` *Var2 )
			Call AddGoalPos ( *Var4 -100` 0` 0` )
			
			Call SetActorSpeed ( *Var4 *Fixed[10.0] )
			Call SetActorJumpGravity ( *Var4 *Fixed[0.7] )
			Call JumpToGoal ( *Var4 30` .False .True .False )
			Call YieldTurn ( )
			
			Call SetGoalToHome ( *Var4 )
			Call SetActorSpeed ( *Var4 *Fixed[6.0] )
			Call FlyToGoal ( *Var4 0` 0` .Easing:Linear )
		EndCaseGroup
	EndSwitch
	
	Call UseIdleAnimation ( *Var4 .True )
	Call EnableIdleScript ( *Var4 .True )
	Call UseIdleAnimation ( .Actor:Self .True )
	Call EnableIdleScript ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_GhostLuigi_Jump {
	Call UseIdleAnimation ( .Actor:Self .False )
	Call EnableIdleScript ( .Actor:Self .False )
	
	Call SetAnimation ( .Actor:Self 1` .Animation:AboutToJump )
	Wait 10`
	Call SetAnimation ( .Actor:Self 1` .Animation:Jumping )
	
	Thread
		Wait 15`
		Call SetAnimation ( .Actor:Self 1` .Animation:Sitting )
	EndThread
	
	Call SetGoalToHome ( .Actor:Self )
	Call SetActorJumpGravity ( .Actor:Self *Fixed[0.4] )
	Call JumpToGoal ( .Actor:Self 40` .False .False .False )
	
	Thread
		Loop 3
			Call TranslateGroup ( ~Model:waa_bt01:dai 0` 4` 0` )
			Call AddActorPos ( .Actor:Self 0` 4` 0` )
			Wait 4`
			Call TranslateGroup ( ~Model:waa_bt01:dai 0` 0` 0` )
			Call AddActorPos ( .Actor:Self 0` -4` 0` )
			Wait 4`
		EndLoop
	EndThread
	
	Call SetTargetActor ( .Actor:Self .Actor:Player )
	Call SetGoalToTarget ( .Actor:Self )
	
	Call EnemyTestTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 *Var7 00000010 )
	
	Switch *Var0
		CaseOR == .HitResult:Miss
		CaseOR == .HitResult:Lucky
			Call SetGoalToHome ( .Actor:Player )
			Call SetActorJumpGravity ( .Actor:Player *Fixed[0.4] )
			Call SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00010009 )
			Call JumpToGoal ( .Actor:Player 40` .True .True .False )
			
			Call UseIdleAnimation ( .Actor:Self .True )
			Call EnableIdleScript ( .Actor:Self .True )
			Return
		EndCaseGroup
	EndSwitch
	
	% throw enemies into air when small luigi (not big luigi; bubbless are floating)
	If *Var6 == .False
		Call ActorExists ( .Actor:Enemy3 *Var0 )
		If *Var0 == .True
			Thread
				Wait 5`
				Call UseIdleAnimation ( .Actor:Enemy3 .False )
				Call EnableIdleScript ( .Actor:Enemy3 .False )
				
				Call SetAnimation ( .Actor:Enemy3 1` 00550010 )
				Call SetGoalToHome ( .Actor:Enemy3 )
				Call SetActorJumpGravity ( .Actor:Enemy3 *Fixed[0.4] )
				Call JumpToGoal ( .Actor:Enemy3 40` .False .False .False )
				
				Call UseIdleAnimation ( .Actor:Enemy3 .True )
				Call EnableIdleScript ( .Actor:Enemy3 .True )
			EndThread
		EndIf
		
		Call ActorExists ( .Actor:Enemy2 *Var0 )
		If *Var0 == .True
			Thread
				Wait 7`
				Call UseIdleAnimation ( .Actor:Enemy2 .False )
				Call EnableIdleScript ( .Actor:Enemy2 .False )
				
				Call SetAnimation ( .Actor:Enemy2 1` 00550010 )
				Call SetGoalToHome ( .Actor:Enemy2 )
				Call SetActorJumpGravity ( .Actor:Enemy2 *Fixed[0.4] )
				Call JumpToGoal ( .Actor:Enemy2 40` .False .False .False )
				
				Call UseIdleAnimation ( .Actor:Enemy2 .True )
				Call EnableIdleScript ( .Actor:Enemy2 .True )
			EndThread
		EndIf
	EndIf
	
	Call GetCurrentPartnerID ( *Var1 )
	
	If *Var1 != 9` % Bow
		Thread
			Call SetGoalToHome ( .Actor:Partner )
			Call SetActorJumpGravity ( .Actor:Partner *Fixed[0.4] )
			Call JumpToGoal ( .Actor:Partner *Var8 .False .False .False )
		EndThread
	EndIf
	
	Call SetGoalToHome ( .Actor:Player )
	Call SetActorJumpGravity ( .Actor:Player *Fixed[0.4] )
	Call JumpToGoal ( .Actor:Player *Var8 .False .False .False )
	
	Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 0000FFFF 00000000 *Var7 00000020 )
	
	If *Var1 != 9`
		Switch *Var0 
			CaseOR == .HitResult:Hit
			CaseOR == .HitResult:QuakeImmune
				Call SetTargetActor ( .Actor:Self .Actor:Partner )
				Call SetGoalToTarget ( .Actor:Self )
				
				Call GetBattleFlags ( *Var0 )
				AND *Var0 80000000 % BS_FLAGS1_ATK_BLOCKED, is set in EnemyDamageTarget above on a successful block
				
				If *Var0 != 0`
					Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 0000FFFF 00000000 0` 00000020 )
				Else
					Switch *Var1
						Case == 3` % Bombette
							Call GetActorPos ( .Actor:Partner *VarA *VarB *VarC )
							Call $Function_PlayExplosionFX ( *VarA *VarB *VarC )
							
							Call PlaySoundAtActor ( .Actor:Partner .Sound:Cannon1 )
							Call SetActorRotationOffset ( .Actor:Partner 0` 16` 0` )
							
							% Bombette descends again after exploding
							Thread
								Set   *Var0  00000000
								Loop  00000050
									Wait  1`
									Call  SetActorRotation  ( .Actor:Partner 00000000 00000000 *Var0 )
									Add   *Var0  00000021
								EndLoop
								Call  SetActorRotation  ( .Actor:Partner 00000000 00000000 00000000 )
							EndThread
							Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000B001B )
							Call  GetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
							Call  SetHomePos ( .Actor:Partner *Var0 *Var1 *Var2 )
							Add   *Var1  000000C8
							Call  SetGoalPos    ( .Actor:Partner *Var0 *Var1 *Var2 )
							Call  FlyToGoal     ( .Actor:Partner  10`  0` .Easing:Linear )
							Wait  50`
							Call  80280818 ( )
							Call  SetGoalToHome ( .Actor:Partner )
							Call  GetGoalPos    ( .Actor:Partner *Var0 *Var1 *Var2 )
							% Add   *Var0  00000019
							Add   *Var1  000000C8
							Call  SetActorPos   ( .Actor:Partner *Var0 *Var1 *Var2 )
							Call  SetGoalToHome ( .Actor:Partner )
							Call  SetActorSpeed ( .Actor:Partner *Fixed[4.0] )
							Call  SetActorJumpGravity   ( .Actor:Partner *Fixed[0.6] )
							Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000B001B )
							Call  JumpToGoal    ( .Actor:Partner  20` .False .True .False )
							Call  SetAnimation  ( .Actor:Partner FFFFFFFF 000B0004 )
							Call SetActorRotationOffset ( .Actor:Partner 0` 0` 0` )
							
							If *Var6 == .True
								Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoOtherDamagePopups 0000FFFF 00000000 1` 00000020 )
							EndIf
						Case == 1` % Goombario
							% NoOtherDamagePopups: allows the game to show multiple
							% attack damge popups at once rather than overwriting the previous one
							Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoOtherDamagePopups 0000FFFF 00000000 *Var9 00000020 )
					EndSwitch
				EndIf
			EndCaseGroup
		EndSwitch
	EndIf
	
	Call UseIdleAnimation ( .Actor:Self .True )
	Call EnableIdleScript ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_NextTurn_GhostLuigi {
	Return
	End
}

#new:Function $Function_SetMaxHP
{
	PUSH S0, RA, S1, S2
	
	% get first argument: actorID
	COPY      S0, A0 % S0: Evt* script (function argument)
	LW        S1, C (S0) % S1: Bytecode* args = script->ptrReadPos
	
	JAL       ~Func:get_variable 
	LW        A1, 0 (S1) % arg A1: *args
	
	COPY      S2, V0 % S2: first arg actorID
	
	% get second argument: new max HP
	COPY      A0, S0 % first arg: Evt* script
	ADDIU     S1, S1, 4 
	JAL       ~Func:get_variable
	LW        A1, 0 (S1)
	
	COPY      S1, V0 % S1: second arg new max HP
	
	% if actorID is .Actor:Self, resolve it
	LI        t0, FFFFFF81
	BNE       S2, t0, .endif
	NOP
	
	LW        S2, 148 (S0) % actorID = script->owner1.actorID (148: offset of owner1)
	
	.endif
	
	% get actor with ID actorID
	JAL       ~Func:get_actor % V0: Actor*
	COPY      A0, S2
	
	% set max HP
	LI        t3, 231
	SB        S1, 1B9 (V0) % 1B9: offset of Actor.maxHP
	
	% returns
	POP S0, RA, S1, S2
	JR        RA
	ADDIU    V0, R0, 2
}

#new:Function $Function_SetActorHeight
{
	PUSH S0, RA, S1, S2
	
	% get first argument: actorID
	COPY      S0, A0 % S0: Evt* script (function argument)
	LW        S1, C (S0) % S1: Bytecode* args = script->ptrReadPos
	
	JAL       ~Func:get_variable 
	LW        A1, 0 (S1) % arg A1: *args
	
	COPY      S2, V0 % S2: first arg actorID
	
	% get second argument: new height
	COPY      A0, S0 % first arg: Evt* script
	ADDIU     S1, S1, 4 
	JAL       ~Func:get_variable
	LW        A1, 0 (S1)
	
	COPY      S1, V0 % S1: second arg new height
	
	% if actorID is .Actor:Self, resolve it
	LI        t0, FFFFFF81
	BNE       S2, t0, .endif
	NOP
	
	LW        S2, 148 (S0) % actorID = script->owner1.actorID (148: offset of owner1)
	
	.endif
	
	% get actor with ID actorID
	JAL       ~Func:get_actor % V0: Actor*
	COPY      A0, S2
	
	% get parts table from actor
	LW        t0, 1F4 (V0) % t0: ActorPart* partsTable
	
	% set target offset y coordinate
	SH        S1, 6E (t0) % 6E: partsTable[0].targetOffset.y
	
	% returns
	POP S0, RA, S1, S2
	JR        RA
	ADDIU    V0, R0, 2
}

#new:Vector3D $Vector3D_BubbleHome0
{
	5` 200` -20`
}

#new:Vector3D $Vector3D_BubbleHome1
{
	45` 200` -5`
}

#new:SpecialFormation $SpecialFormation_Bubble0
{
	$16_LavaBubble $Vector3D_BubbleHome0 14` 00000000 00000000 00000000 00000000
}

#new:SpecialFormation $SpecialFormation_Bubble1
{
	$16_LavaBubble $Vector3D_BubbleHome1 13` 00000000 00000000 00000000 00000000
}

#new:Script $Script_HandleEvent_GhostLuigi {
	Call  UseIdleAnimation  ( .Actor:Self .False )
	Call  EnableIdleScript  ( .Actor:Self 00000000 )
	Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	Call  GetLastEvent      ( .Actor:Self *Var0 )
	Switch  *Var0
		CaseOR  ==  .Event:HitCombo % 9
		CaseOR  ==  .Event:Hit % A
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Hit
			ExecWait  DoNormalHit
		EndCaseGroup
		Case  ==  .Event:BurnHit % E
			SetConst  *Var0  00000001
			SetConst  *Var1  00820022
			SetConst  *Var2  00820022
			ExecWait  DoBurnHit
		Case  ==  .Event:BurnDeath % 24
			BreakCase
			
			SetConst  *Var0  00000001
			SetConst  *Var1  00820022
			SetConst  *Var2  00820022
			ExecWait  DoBurnHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00820023
			ExecWait  DoDeath
			Return
		Case  ==  .Event:SpinSmashHit % B
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoSpinSmashHit
		Case  ==  .Event:SpinSmashDeath % 21
			BreakCase
			
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoSpinSmashHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260006
			ExecWait  DoDeath
			Return
		Case  ==  .Event:ShockHit % 2F
			SetConst  *Var0  00000001
			SetConst  *Var1  0026000E
			ExecWait  DoShockHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoJumpBack
			Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetAnimation  ( .Actor:Self 00000001 00260007 )
			Call  SetGoalToHome ( .Actor:Self )
			Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
			Call  RunToGoal     ( .Actor:Self  0` .False )
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
			Wait  5`
			Call  SetAnimation  ( .Actor:Self 00000001 00260001 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
			Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
		Case  ==  .Event:ShockDeath % 26
			BreakCase
			
			SetConst  *Var0  00000001
			SetConst  *Var1  0026000E
			ExecWait  DoShockHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260006
			ExecWait  DoDeath
			Return
		Case  ==  .Event:StarBeam % 13
		CaseOR  ==  00000017 % 17
		CaseOR  ==  .Event:Immune % 19
		CaseOR  ==  .Event:AirLiftFailed % 1F
			SetConst  *Var0  00000001
			SetConst  *Var1  00820000
			ExecWait  DoImmune
		EndCaseGroup
		Case  ==  .Event:Death % 20
			Call SetEnemyHP ( .Actor:Self 2` )
			BreakCase
			
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Hit
			ExecWait  DoNormalHit
			Wait  10`
			Call ActorSpeak ( 002F0002 .Actor:Self 1` 00820014 00820004 )
			Wait 10`
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Falling
			ExecWait  DoDeath
			Return
		Case  ==  .Event:EndFirstStrike % 35
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetAnimation  ( .Actor:Self 00000001 00260003 )
			Call  SetGoalToHome ( .Actor:Self )
			Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
			Call  RunToGoal     ( .Actor:Self  0` .False )
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
			Call  HPBarToHome   ( .Actor:Self )
		Case  ==  .Event:RecoverStatus % 31
			SetConst  *Var0  00000001
			SetConst  *Var1  00260001
			ExecWait  DoRecover
		Case  ==  .Event:ScareAway % 39
			SetConst  *Var0  00000001
			SetConst  *Var1  00260003
			SetConst  *Var2  00260005
			ExecWait  DoScareAway
			Return
		Case  ==  .Event:BeginAirLift % 3A
			SetConst  *Var0  00000001
			SetConst  *Var1  00260003
			ExecWait  DoAirLift
		Case  ==  .Event:BlowAway % 16
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoBlowAway
			Return
		Default
	EndSwitch
	
	Call GetActorHP ( .Actor:Self *Var0 )
	If *Var0 <= 5`
		Call SetEnemyHP ( .Actor:Self 5` )
		Call SetDefenseTable ( .Actor:Self 1` $DefenseTable_GhostLuigi_Invulnerable )
		
		% Because of the Wait, the following code only gets executed once
		% All of the player's hits have ended
		Wait 30`
		Call EnableIdleScript  ( .Actor:Self .False )
		Call UseIdleAnimation  ( .Actor:Self .False )
		
		Call ActorSpeak ( 002F0006 .Actor:Self 1` 00820014 00820004 )
		Call SetPartFlagBits ( .Actor:Self 2` 1` .False )
		Call GetActorPos ( .Actor:Self *VarA *VarB *VarC )
		Sub *VarA 20`
		Add *VarB 20`
		Call SetPartPos ( .Actor:Self 2` *VarA *VarB *VarC )
		
		Wait 30`
		Thread
			Wait 20`
			Call SetAnimation ( .Actor:Self 1` .Animation:LookingUp )
		EndThread
		
		Add *VarA 20`
		Add *VarB 10`
		Call FlyPartTo ( .Actor:Self 2` *VarA *VarB *VarC 30` 80` .Easing:Linear )
		
		Wait 2`
		Thread
			Wait 2`
			Call SetPartFlagBits ( .Actor:Self 2` 1` .True )
		EndThread
		Thread
			% Update Luigi's HP
			Call MakeLerp ( 5` 45` 75` .Easing:Linear )
			Loop
				Call UpdateLerp ()
				Call SetEnemyHP ( .Actor:Self *Var0 )
				If *Var1 != 00000001
					BreakLoop
				EndIf
				Wait 1`
			EndLoop
		EndThread
		Thread
			% Update Luigi's max HP
			Call MakeLerp ( 35` 45` 70` .Easing:Linear )
			Loop
				Call UpdateLerp ()
				Call $Function_SetMaxHP ( .Actor:Self *Var0 )
				If *Var1 != 00000001
					BreakLoop
				EndIf
				Wait 1`
			EndLoop
		EndThread
		Call ActorExists ( .Actor:Enemy2 *Var0 )
		If *Var0 == .True
			% Make first bony beetle fly away
			Thread
				Wait 50`
				Call GetActorPos ( .Actor:Enemy2 *VarA *VarB *VarC )
				Sub *VarA 100`
				Add *VarB 200`
				Call SetGoalPos ( .Actor:Enemy2 *VarA *VarB *VarC )
				Call SetActorSpeed ( .Actor:Enemy2 *Fixed[7.0] )
				Call FlyToGoal ( .Actor:Enemy2 0` 0` .Easing:Linear )
			EndThread
			Thread
				Wait 50`
				Call SetActorRotationOffset ( .Actor:Enemy2 0` 16` 0` )
				Set *Var0 0`
				Loop 30`
					Call ActorExists ( .Actor:Enemy2 *Var1 )
					If *Var1 == .False
						BreakLoop
					EndIf
					Add *Var0 20`
					Call SetActorRotation ( .Actor:Enemy2 0` 0` *Var0 )
					Wait 1`
				EndLoop
			EndThread
		EndIf
		Call ActorExists ( .Actor:Enemy3 *Var0 )
		If *Var0 == .True
			% Make second bony beetle fly away
			Thread
				Wait 65`
				Call GetActorPos ( .Actor:Enemy3 *VarA *VarB *VarC )
				Sub *VarA 250`
				Add *VarB 200`
				Call SetGoalPos ( .Actor:Enemy3 *VarA *VarB *VarC )
				Call SetActorSpeed ( .Actor:Enemy3 *Fixed[8.0] )
				Call FlyToGoal ( .Actor:Enemy3 0` 0` .Easing:Linear )
			EndThread
			Thread
				Wait 65`
				Call SetActorRotationOffset ( .Actor:Enemy3 0` 16` 0` )
				Set *Var0 0`
				Loop 30`
					Call ActorExists ( .Actor:Enemy3 *Var1 )
					If *Var1 == .False
						BreakLoop
					EndIf
					Add *Var0 20`
					Call SetActorRotation ( .Actor:Enemy3 0` 0` *Var0 )
					Wait 1`
				EndLoop
			EndThread
		EndIf
		Call SetAnimation ( .Actor:Self 1` .Animation:Idle )
		
		% First Half of growth
		Call SetEnemyHP ( .Actor:Self 40` )
		
		Call MakeLerp ( 100` 200` 45` .Easing:QuadraticIn )
		Loop
			Call UpdateLerp ()
			Set *Var2 *Var0
			DivF *Var2 100`
			Call SetPartScale ( .Actor:Self 1` *Var2 *Var2 *Var2 )
			If *Var1 != 00000001
				BreakLoop
			EndIf
			Wait 1`
		EndLoop
		
		% Second Half of growth
		Call MakeLerp ( 200` 300` 30` .Easing:QuadraticOut )
		Loop
			Call UpdateLerp ()
			Set *Var2 *Var0
			DivF *Var2 100`
			Call SetPartScale ( .Actor:Self 1` *Var2 *Var2 *Var2 )
			If *Var1 != 00000001
				BreakLoop
			EndIf
			Wait 1`
		EndLoop
		
		Call SetDefenseTable ( .Actor:Self 1` $DefenseTable_Luigi )
		Call $Function_SetActorHeight ( .Actor:Self 132` )
		Call SetActorVar ( .Actor:Self 0` 2` )
		Call CancelEnemyTurn ( 0000001 )
		
		% I tried adding a wait here but it makes SummonEnemy crash, I don't know why
		Call ActorExists ( .Actor:Enemy2 *Var0 )
		If *Var0 == .True
			Call RemoveActor ( .Actor:Enemy2 )
		EndIf
		
		Call ActorExists ( .Actor:Enemy3 *Var0 )
		If *Var0 == .True
			Call RemoveActor ( .Actor:Enemy3 )
		EndIf
		
		Call UseBattleCamPreset ( 2` )
		
		Wait 1`
		Call SummonEnemy ( $SpecialFormation_Bubble1 0` )
		Call SummonEnemy ( $SpecialFormation_Bubble0 0` )
		
		Call UseIdleAnimation ( .Actor:Enemy0 .False )
		Call EnableIdleScript ( .Actor:Enemy0 .False )
		Call UseIdleAnimation ( .Actor:Enemy2 .False )
		Call EnableIdleScript ( .Actor:Enemy2 .False )
		
		Call GetActorPos ( .Actor:Enemy0 *VarA *VarB *VarC)
		Sub *VarB 200`
		Call SetGoalPos ( .Actor:Enemy0 *VarA *VarB *VarC )
		Call SetHomePos ( .Actor:Enemy0 *VarA *VarB *VarC )
		Call HPBarToHome ( .Actor:Enemy0 )
		
		Call GetActorPos ( .Actor:Enemy2 *VarA *VarB *VarC)
		Sub *VarB 200`
		Call SetGoalPos ( .Actor:Enemy2 *VarA *VarB *VarC )
		
		Thread
			Wait 10`
			Call SetActorSpeed ( .Actor:Enemy2 *Fixed[4.0] )
			Call FlyToGoal ( .Actor:Enemy2 0` 0` .Easing:Linear )
			Call SetHomePos ( .Actor:Enemy2 *VarA *VarB *VarC )
			Call HPBarToHome ( .Actor:Enemy2 )
		EndThread
		
		Call SetActorSpeed ( .Actor:Enemy0 *Fixed[4.0] )
		Call FlyToGoal ( .Actor:Enemy0 0` 0` .Easing:Linear )
		
		% Call SummonEnemy ( $SpecialFormation_BonyBeetle0 0` )
	EndIf
	
	Call  SetAnimation      ( .Actor:Self 00000001 00260001 )
	Call  EnableIdleScript  ( .Actor:Self 00000001 )
	Call  UseIdleAnimation  ( .Actor:Self .True )
	Return
	End
}

% Custom Stage

#new:Stage $Stage_Luimgi {
	"arn_tex"
	"waa_bt01_shape"
	"waa_bt01_hit"
	$Script_BeforeBattle_Luimgi
	$Script_AfterBattle_Luimgi
	"hos_bg"
	$ForegroundModelList_Luimgi
	00000000
	00000000
	00000000
}

#new:ForegroundModelList $ForegroundModelList_Luimgi {
	00000000
}

#new:Script $Script_BeforeBattle_Luimgi {
	% VarA - shooting star model group, VarB - speed
	Set *VarA ~Model:waa_bt01:Shooting0
	Set *VarB 8`
	Exec $Script_MoveShootingStar
	
	Set *VarA ~Model:waa_bt01:Shooting1
	Set *VarB 8`
	Exec $Script_MoveShootingStar
	
	Return
	End
}

#new:Script $Script_MoveShootingStar
{
	Wait 30`
	Loop
		% Decide every frame randomly if it should fall down
		Loop
			Call RandInt ( 1000` *Var2 )
			If *Var2 == 1`
				BreakLoop
			EndIf
			Wait 1`
		EndLoop
		
		% TODO: play shooting star sound?
		
		% Set starting position
		Call RandInt ( 380` *Var0 )
		Sub *Var0 280`
		Set *Var1 0`
		
		% Fall down
		Loop 120`
			Add *Var0 *VarB
			Sub *Var1 *VarB
			Call  TranslateGroup ( *VarA *Var0 *Var1 0` )
			Wait 1`
		EndLoop
	EndLoop
	Return
	End
}

#new:Script $Script_AfterBattle_Luimgi {
	Return
	End
}

% Custom Formation

#new:Stage $Stage_abc {
	"arn_tex"
	"waa_bt02_shape"
	"waa_bt02_hit"
	$Script_BeforeBattle_Luimgi
	$Script_AfterBattle_8022BACC
	"nok_bg"
	$ForegroundModelList_8022BADC
	00000000
	00000000
	00000000
}

@ $FormationTable {
	$SJIS_8022BE10 00000002 $Formation_00 $Stage_8022BAEC 00000000
	$SJIS_8022BDF8 00000002 $Formation_01 $Stage_8022BAEC 00000000
	$SJIS_8022BDE8 00000002 $Formation_02 $Stage_8022BAEC 00000000
	$SJIS_8022BDCC 00000002 $Formation_03 $Stage_8022BAEC 00000000
	$SJIS_8022BDBC 00000002 $Formation_04 $Stage_8022BAEC 00000000
	$SJIS_8022BDA0 00000003 $Formation_05 $Stage_8022BAEC 00000000
	$SJIS_8022BD90 00000003 $Formation_06 $Stage_8022BAEC 00000000
	$SJIS_8022BD80 00000004 $Formation_07 $Stage_8022BAEC 00000000
	$SJIS_8022BD6C 00000002 $Formation_08 $Stage_8022BAEC 00000000
	$SJIS_8022BD60 00000002 $Formation_09 $Stage_8022BAEC 00000000
	$SJIS_8022BD54 00000003 $Formation_0A $Stage_8022BAEC 00000000
	$SJIS_8022BD3C 00000002 $Formation_0B $Stage_8022BAEC 00000000
	$SJIS_8022BD24 00000003 $Formation_0C $Stage_8022BAEC 00000000
	$SJIS_8022BD08 00000003 $Formation_0D $Stage_8022BAEC 00000000
	$SJIS_8022BCEC 00000003 $Formation_0E $Stage_8022BAEC 00000000
	$SJIS_8022BCC8 00000003 $Formation_0F $Stage_8022BAEC 00000000
	$SJIS_8022BCA0 00000004 $Formation_10 $Stage_8022BAEC 00000000
	$SJIS_8022BC94 00000002 $Formation_11 $Stage_8022BAEC 00000000
	$SJIS_8022BC80 00000002 $Formation_12 $Stage_8022BAEC 00000000
	$SJIS_8022BC5C 00000003 $Formation_13 $Stage_8022BAEC 00000000
	$SJIS_8022BC38 00000004 $Formation_14 $Stage_8022BAEC 00000000
	$SJIS_8022BC2C 00000001 $Formation_15 $Stage_8022BAEC 00000000
	$SJIS_8022BC1C 00000002 $Formation_16 $Stage_8022BAEC 00000000
	$SJIS_8022BC0C 00000004 $Formation_17 $Stage_8022BAEC 00000000
	$SJIS_8022BC00 00000001 $Formation_18 $Stage_8022BAEC 00000000
	$SJIS_Formation_19 00000002 $Formation_19 $Stage_Luimgi 00000000
	00000000 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_19 {
	% actor type - id - ??
	$Luigi 2` 10` 00000000 00000000 00000000 00000000
	$GhostLuigi 2` 9` 00000000 00000000 00000000 00000000
}

#new:SJIS $SJIS_Formation_19 {
	luim. gi
}
