#import enemy/22_BonyBeetle.bpat

% Luigi (Actor)

#define .Animation:Sitting 00820007
#define .Animation:Idle 00820008
#define .Animation:Running 0082000A
#define .Animation:AboutToJump 0082000C
#define .Animation:Jumping 0082000D
#define .Animation:Falling 0082000E
#define .Animation:Hit 0082000F
#define .Animation:OpeningLetter 00820018
#define .Animation:ReadingLetter 00820019

#new:Actor $Luigi
{
	% stats
	[Index]         D4b
	[Level]         40`b
	% [MaxHP]         30`b
	[MaxHP]         2`b
	[Coins]         1`b
	[Flags]       00000000
	[StatusTable] $StatusTable_8021975C
	% ai
	[PartsCount]    4`s
	[PartsTable]  $PartsTable_Luigi
	[Script]      $Script_Init_Luigi
	% move effectiveness
	[Escape]       90`b
	[Item]        100`b
	[AirLift]     100`b
	[Hurricane]    90`b % Bow's "Spook" as well
	[UpAndAway]    95`b
	[PowerBounce] 80`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         24`b  24`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:PartsTable $PartsTable_Luigi {
	00800000 01000000 002C00FF $IdleAnimations_Luigi $DefenseTable_Luigi 00000000 00000000 00F60000 00000000
	00120001 02000000 001800FF $IdleAnimations_Projectile $DefenseTable_Projectile 00000000 00000000 FFF60000 00000000
	00120001 03000000 001800FF $IdleAnimations_Projectile $DefenseTable_Projectile 00000000 00000000 FFF60000 00000000
}

#new:IdleAnimations $IdleAnimations_Luigi {
	.Status:Normal    .Animation:Idle
	.Status:Sleep     00820003
	.Status:End
}

#new:IdleAnimations $IdleAnimations_Luigi_Shuffle {
	.Status:Normal    .Animation:Running
	.Status:End
}

#new:DefenseTable $DefenseTable_Luigi {
	.Element:Normal 00000000
	.Element:End
}

#new:IdleAnimations $IdleAnimations_Projectile {
	.Status:Normal    003D000B
	.Status:End
}

#new:DefenseTable $DefenseTable_Projectile {
	.Element:Normal 00000000
	.Element:Shock  00000000
	.Element:End
}

#new:Script $Script_Init_Luigi {
	Call BindTakeTurn ( .Actor:Self $Script_TakeTurn_Luigi )
	Call BindIdle ( .Actor:Self $Script_Idle_Luigi )
	Call BindNextTurn ( .Actor:Self $Script_NextTurn_Luigi )
	Call BindHandleEvent ( .Actor:Self $Script_HandleEvent_Luigi )
	
	Call SetActorVar ( .Actor:Self 0` 0` ) % Var 0: next attack - 0`: jump, 1`: thunder
	Call SetActorVar ( .Actor:Self 1` .False ) % Var 1: held speech at very start - .False, .True
	Return
	End
}

#new:Script $Script_NextTurn_Luigi {
	Call GetActorVar ( .Actor:Self 1` *Var0 )
	If *Var0 == .False
		Call ActorSpeak ( 002F0001 .Actor:Self 1` 00820014 00820004 )
		Call SetActorVar ( .Actor:Self 1` .True )
	EndIf
	Return
	End
}

#new:Script $Script_TakeTurn_Luigi {
	Call GetActorVar ( .Actor:Self 0` *Var0 )
	
	If *Var0 == 0`
		Call SetActorVar ( .Actor:Self 0` 1` )
		ExecWait $Script_Luigi_Jump
	Else
		Call SetActorVar ( .Actor:Self 0` 0` )
		ExecWait $Script_Luigi_Thunder
	EndIf
	Return
	End
}

#new:Script $Script_Luigi_Jump {
	Call UseIdleAnimation  ( .Actor:Self .False )
	Call EnableIdleScript  ( .Actor:Self 00000000 )
	Call SetTargetActor    ( .Actor:Self .Actor:Player )
	Call UseBattleCamPreset    ( 0000003F )
	Call BattleCamTargetActor  ( .Actor:Self )
	Call 8024ECF8  ( FFFFFFFF 00000001 00000000 )
	
	% Running towards player
	Call SetAnimation      ( .Actor:Self 00000001 .Animation:Running )
	Call SetGoalToTarget   ( .Actor:Self )
	Call AddGoalPos        ( .Actor:Self  50`  0`  0` )
	Call SetActorSpeed     ( .Actor:Self *Fixed[6.0] )
	Call RunToGoal ( .Actor:Self  0` .False )
	Call SetAnimation      ( .Actor:Self 00000001 .Animation:AboutToJump )
	Call SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFF 00000000 )
	Wait 1`
	Call SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
	Wait 5`
	Call SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
	
	% Jump
	Call SetAnimation      ( .Actor:Self 00000001 .Animation:Jumping )
	Call EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
	Set *MB_debug 3`
	Switch  *Var0
		CaseOR  ==  .HitResult:Miss % 6
		CaseOR  ==  .HitResult:Lucky % 5
			Set   *VarA  *Var0
			Call  SetGoalToTarget   ( .Actor:Self )
			Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
			Sub   *Var0  0000000A
			Set   *Var1  0000000A
			Add   *Var2  00000003
			Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
			Thread
				Wait  6`
				Call  SetAnimation  ( .Actor:Self 00000001 00260004 )
			EndThread
			Call  JumpToGoal    ( .Actor:Self  16` .False .True .False )
			Call  SetAnimation  ( .Actor:Self 00000001 00260008 )
			Call  SetActorScale ( .Actor:Self *Fixed[1.1] *Fixed[0.8] *Fixed[1.0] )
			Call  SetActorDispOffset    ( .Actor:Self 00000000 00000005 00000000 )
			Wait  1`
			Call  SetActorScale ( .Actor:Self *Fixed[1.3] *Fixed[0.5] *Fixed[1.0] )
			Call  SetActorDispOffset    ( .Actor:Self 00000000 FFFFFFFE 00000000 )
			Wait  1`
			Call  SetActorScale ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
			Call  SetActorDispOffset    ( .Actor:Self 00000000 00000007 00000000 )
			Call  SetAnimation  ( .Actor:Self 00000001 00260005 )
			Wait  5`
			If  *VarA  ==  .HitResult:Lucky % 5
				Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
			EndIf
			Wait  5`
			Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
			Call  SetAnimation      ( .Actor:Self 00000001 00260004 )
			Call  SetGoalToTarget   ( .Actor:Self )
			Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
			Add   *Var0  00000014
			Set   *Var1  00000000
			Call  SetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[2.0] )
			Thread
				Wait  4`
				Set   *Var0  000000B4
				Loop  00000004
					Sub   *Var0  0000002D
					Call  SetActorRotation  ( .Actor:Self 00000000 00000000 *Var0 )
					Wait  1`
				EndLoop
				Call  SetAnimation  ( .Actor:Self 00000001 00260004 )
			EndThread
			Call  JumpToGoal        ( .Actor:Self  15` .False .True .False )
			Call  SetAnimation      ( .Actor:Self 00000001 00260007 )
			Wait  5`
			Call  UseBattleCamPreset    ( 00000002 )
			Call  YieldTurn ( )
			Call  SetActorYaw       ( .Actor:Self  180` )
			Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetGoalToHome     ( .Actor:Self )
			Call  SetActorSpeed     ( .Actor:Self *Fixed[8.0] )
			Call  RunToGoal ( .Actor:Self  0` .False )
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
			Call  SetActorYaw       ( .Actor:Self  0` )
			Wait  5`
			Call  SetAnimation      ( .Actor:Self 00000001 00260001 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
			Call  JumpToGoal        ( .Actor:Self  5` .False .True .False )
			Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
			Call  EnableIdleScript  ( .Actor:Self 00000001 )
			Call  UseIdleAnimation  ( .Actor:Self .True )
			Return
		EndCaseGroup
		Default
			Call  SetGoalToTarget       ( .Actor:Self )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.2] )
			Thread
				Wait  6`
				Call  SetAnimation  ( .Actor:Self 00000001 .Animation:Falling )
			EndThread
			Call  JumpToGoal    ( .Actor:Self  16` .False .True .False )
			
			% Hit Mario
			Call  SetAnimation  ( .Actor:Self 00000001 .Animation:AboutToJump )
			Wait  2`
	EndSwitch
	Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000001 00000020 )
	Switch  *Var0
		CaseOR  ==  .HitResult:Hit % 0
		CaseOR  ==  .HitResult:QuakeImmune % 2
			Call  UseBattleCamPreset    ( 00000002 )
			Wait  2`
			
			% Rebounding & Bounce
			Call  SetActorDispOffset    ( .Actor:Self 00000000 00000000 00000000 )
			Call  SetAnimation  ( .Actor:Self 00000001 .Animation:Idle )
			Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
			Add   *Var0  00000028
			Set   *Var1  00000000
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.8] )
			Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  JumpToGoal    ( .Actor:Self  10` .False .True .False )
			Add   *Var0  0000001E
			Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  JumpToGoal    ( .Actor:Self  8` .False .True .False )
			Add   *Var0  00000014
			Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
			Call  JumpToGoal    ( .Actor:Self  6` .False .True .False )
			Call  SetAnimation  ( .Actor:Self 00000001 00820004 )
			Wait  3`
			Call  YieldTurn ( )
			
			% Run back
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetAnimation  ( .Actor:Self 00000001 .Animation:Running )
			Call  SetGoalToHome ( .Actor:Self )
			Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
			Call  RunToGoal     ( .Actor:Self  0` .False )
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
		EndCaseGroup
	EndSwitch
	Call  EnableIdleScript  ( .Actor:Self 00000001 )
	Call  UseIdleAnimation  ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_Luigi_Thunder {
	% Preparation
	Call UseIdleAnimation ( .Actor:Self .False )
	Call EnableIdleScript ( .Actor:Self .False )
	Call SetTargetActor    ( .Actor:Self .Actor:Player )
	Call UseBattleCamPreset    ( 0000003F )
	Call BattleCamTargetActor  ( .Actor:Self )
	
	% Reading Animation & Spawning Spheres
	Call SetAnimation ( .Actor:Self 1` .Animation:OpeningLetter )
	Wait 16`
	Call SetAnimation ( .Actor:Self 1` .Animation:ReadingLetter )
	
	Thread
		Wait 9`
		Call GetActorPos       ( .Actor:Self *VarA *VarB *VarC )
		Add *VarB 30`
		Call SetPartPos        ( .Actor:Self 2` *VarA *VarB *VarC )
		Call SetPartFlagBits   ( .Actor:Self 2` 1` .False )
		Call SetPartScale ( .Actor:Self 2` *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
		
		Sub *VarA 15`
		Add *VarB 40`
		Call FlyPartTo ( .Actor:Self 2` *VarA *VarB *VarC 20` 0` .Easing:CubicOut )
	EndThread
	Thread
		Wait 19`
		Call GetActorPos       ( .Actor:Self *VarA *VarB *VarC )
		Add *VarB 30`
		Call SetPartPos        ( .Actor:Self 3` *VarA *VarB *VarC )
		Call SetPartFlagBits   ( .Actor:Self 3` 1` .False )
		Call SetPartScale ( .Actor:Self 3` *Fixed[1.5] *Fixed[1.5] *Fixed[1.5] )
		
		Add *VarA 15`
		Add *VarB 40`
		Call FlyPartTo ( .Actor:Self 3` *VarA *VarB *VarC 20` 0` .Easing:CubicOut )
	EndThread
	Wait 30`
	
	Call SetAnimation ( .Actor:Self 1` .Animation:AboutToJump )
	Wait 30`
	
	% Throw Projectiles
	Call SetGoalToTarget ( .Actor:Self )
	Call GetGoalPos ( .Actor:Self *VarA *VarB *VarC )
	
	Thread
		Wait 14`
		
		% Second Projectile
		Call SetPartMoveSpeed ( .Actor:Self 3` *Fixed[12.0] )
		Call SetPartJumpGravity ( .Actor:Self 3` *Fixed[0.001953125] )
		Call JumpPartTo ( .Actor:Self 3` *VarA *VarB *VarC  0` .True )
		
		Wait 2`
		Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 00000002 00000020 )
		
		Switch *Var0
			CaseOR  ==  .HitResult:Hit % 0
			CaseOR  ==  .HitResult:QuakeImmune % 2
				Call GetPartOffset     ( .Actor:Self 3` *Var0 *Var1 *Var2 )
				Sub *Var0  00000064
				Call SetPartJumpGravity    ( .Actor:Self 3` *Fixed[0.7] )
				Call JumpPartTo        ( .Actor:Self 3` *Var0  0` *Var2  30` .True )
				Call SetPartFlagBits   ( .Actor:Self 3` 00000001 .True )
				Call YieldTurn ( )
			EndCaseGroup
		EndSwitch
	EndThread
	
	% First Projectile
	Call SetPartMoveSpeed ( .Actor:Self 2` *Fixed[12.0] )
	Call SetPartJumpGravity ( .Actor:Self 2` *Fixed[0.001953125] )
	Call JumpPartTo ( .Actor:Self 2` *VarA *VarB *VarC  0` .True )
	
	Wait 2`
	Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 00000002 00000020 )
	
	Switch *Var0
		CaseOR  ==  .HitResult:Hit % 0
		CaseOR  ==  .HitResult:QuakeImmune % 2
			Call GetPartOffset     ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
			Sub *Var0  00000064
			Call SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.7] )
			Call JumpPartTo        ( .Actor:Self 00000002 *Var0  0` *Var2  30` .True )
			Call SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
		EndCaseGroup
	EndSwitch
	
	Call EnableIdleScript ( .Actor:Self 00000001 )
	Call UseIdleAnimation ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_Idle_Luigi {
	Label  A
	Call  RandInt   ( 00000050 *Var0 )
	Add   *Var0  00000050
	Loop  *Var0
		Label  0
		Call  GetStatusFlags    ( .Actor:Self *Var1 )
		If  *Var1  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
			Wait  1`
			Goto  0
		EndIf
		Wait  1`
	EndLoop
	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
	Add   *Var0  00000005
	Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_Luigi_Shuffle )
	Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
	Call  IdleRunToGoal     ( .Actor:Self  0` )
	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_Luigi )
	Loop  00000014
		Label  1
		Call  GetStatusFlags    ( .Actor:Self *Var1 )
		If  *Var1  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
			Wait  1`
			Goto  1
		EndIf
		Wait  1`
	EndLoop
	Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
	Sub   *Var0  00000005
	Call  SetActorIdleSpeed ( .Actor:Self *Fixed[1.0] )
	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_Luigi_Shuffle )
	Call  SetIdleGoal       ( .Actor:Self *Var0 *Var1 *Var2 )
	Call  IdleRunToGoal     ( .Actor:Self  0` )
	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_Luigi )
	Loop  00000050
		Label  2
		Call  GetStatusFlags    ( .Actor:Self *Var1 )
		If  *Var1  &  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
			Wait  1`
			Goto  2
		EndIf
		Wait  1`
	EndLoop
	Goto  A
	Return
	End
}

#new:Vector3D $Vector3D_Home0
{
	205` 0` -20`
}

#new:Vector3D $Vector3D_Home1
{
	245` 0` -5`
}

#new:SpecialFormation $SpecialFormation_BonyBeetle0
{
	$22_BonyBeetle $Vector3D_Home0 12` 00000000 00000000 00000000 00000000
}

#new:SpecialFormation $SpecialFormation_BonyBeetle1
{
	$22_BonyBeetle $Vector3D_Home1 11` 00000000 00000000 00000000 00000000
}

#new:Script $Script_HandleEvent_Luigi {
	Call  UseIdleAnimation  ( .Actor:Self .False )
	Call  EnableIdleScript  ( .Actor:Self 00000000 )
	Call  SetActorScale     ( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	Call  GetLastEvent      ( .Actor:Self *Var0 )
	Switch  *Var0
		CaseOR  ==  .Event:HitCombo % 9
		CaseOR  ==  .Event:Hit % A
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Hit
			ExecWait  DoNormalHit
		EndCaseGroup
		Case  ==  .Event:BurnHit % E
			SetConst  *Var0  00000001
			SetConst  *Var1  00260009
			SetConst  *Var2  0026000A
			ExecWait  DoBurnHit
		Case  ==  .Event:BurnDeath % 24
			SetConst  *Var0  00000001
			SetConst  *Var1  00260009
			SetConst  *Var2  0026000A
			ExecWait  DoBurnHit
			SetConst  *Var0  00000001
			SetConst  *Var1  0026000A
			ExecWait  DoDeath
			Return
		Case  ==  .Event:SpinSmashHit % B
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoSpinSmashHit
		Case  ==  .Event:SpinSmashDeath % 21
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoSpinSmashHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260006
			ExecWait  DoDeath
			Return
		Case  ==  .Event:ShockHit % 2F
			SetConst  *Var0  00000001
			SetConst  *Var1  0026000E
			ExecWait  DoShockHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoJumpBack
			Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetAnimation  ( .Actor:Self 00000001 00260007 )
			Call  SetGoalToHome ( .Actor:Self )
			Call  SetActorSpeed ( .Actor:Self *Fixed[8.0] )
			Call  RunToGoal     ( .Actor:Self  0` .False )
			Call  SetAnimationRate      ( .Actor:Self 00000001 *Fixed[1.0] )
			Wait  5`
			Call  SetAnimation  ( .Actor:Self 00000001 00260001 )
			Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.6] )
			Call  JumpToGoal    ( .Actor:Self  5` .False .True .False )
		Case  ==  .Event:ShockDeath % 26
			SetConst  *Var0  00000001
			SetConst  *Var1  0026000E
			ExecWait  DoShockHit
			SetConst  *Var0  00000001
			SetConst  *Var1  00260006
			ExecWait  DoDeath
			Return
		Case  ==  .Event:StarBeam % 13
		CaseOR  ==  00000017 % 17
		CaseOR  ==  .Event:Immune % 19
		CaseOR  ==  .Event:AirLiftFailed % 1F
			SetConst  *Var0  00000001
			SetConst  *Var1  00260001
			ExecWait  DoImmune
		EndCaseGroup
		Case  ==  .Event:Death % 20
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Hit
			ExecWait  DoNormalHit
			Wait  10`
			Call ActorSpeak ( 002F0002 .Actor:Self 1` 00820014 00820004 )
			Wait 10`
			SetConst  *Var0  00000001
			SetConst  *Var1  .Animation:Falling
			ExecWait  8029AF08 % DoDeath without remove - or EVS_Enemy_DeathWithoutRemove in decomp
			
			% Make luigi have a seizure (idk why this happens but it's funny)
			% Call MakeLerp ( 230` 0` 300` .Easing:Linear )
			% Loop
			% 	Call  UpdateLerp ( )
			% 	Call GetActorPos ( .Actor:Self *VarA *VarB *VarC )
			% 	Call SetActorPos ( .Actor:Self *VarA *Var0 *VarC )
			% 	Wait  1`
			% 	If  *Var1  ==  .False 
			% 		BreakLoop
			% 	EndIf
			% EndLoop
			
			Call UseBattleCamPreset ( 2` ) % because 2` = default for some reason
			
			Wait 20`
			
			Call UseIdleAnimation ( .Actor:Partner .False )
			Call ActorSpeak ( 002F0003 .Actor:Partner 1` 000D0004 000D0001 )
			Call UseIdleAnimation ( .Actor:Partner .True )
			
			Wait 120`
			
			% Prepare ghost luigi descend (for real this time)
			Call GetActorPos ( .Actor:Enemy1 *VarA *VarB *VarC )
			Call SetGoalPos ( .Actor:Enemy1 *VarA *VarB *VarC )
			Call AddActorPos ( .Actor:Enemy1 0` 200` 0` )
			Call SetPartFlagBits   ( .Actor:Self 1` 20001 .True )
			Call SetPartFlagBits   ( .Actor:Enemy1 1` 20001 .False )
			Call UseIdleAnimation ( .Actor:Enemy1 .False )
			
			% Make Mario emote
			Wait 20`
			Call PlaySoundAtActor  ( .Actor:Player 00000263 )
			Call GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
			Add *Var1  00000014
			Call PlayEffect        ( ~FX:EmoteIcon:Question 00000000 *Var0 *Var1 *Var2 20` 315` 30` 0` 0` 00000000 00000000 00000000 )
			
			Wait 30`
			
			Call ActorSpeak ( 002F0004 .Actor:Enemy1 1` .Animation:Idle .Animation:Idle ) % Luigi is offscreen so animations don't really matter
			
			% Make luigi descend (for real this time)
			Wait 60`
			Call FlyToGoal ( .Actor:Enemy1 200` 0` .Easing:Linear )
			Call GetActorVar ( .Actor:Enemy1 1` *Var0 )
			
			Wait 15`
			Call ActorSpeak ( 002F0005 .Actor:Enemy1 1` 00820014 .Animation:Idle )
			
			% Spawn in Bony Beetles
			Call SummonEnemy ( $SpecialFormation_BonyBeetle1 0` )
			Call SummonEnemy ( $SpecialFormation_BonyBeetle0 0` )
			
			Call GetActorPos ( .Actor:Enemy2 *VarA *VarB *VarC)
			Sub *VarA 200`
			Call SetGoalPos ( .Actor:Enemy2 *VarA *VarB *VarC )
			Call SetHomePos ( .Actor:Enemy2 *VarA *VarB *VarC )
			Call HPBarToHome ( .Actor:Enemy2 )
			
			Call GetActorPos ( .Actor:Enemy3 *VarA *VarB *VarC)
			Sub *VarA 200`
			Call SetGoalPos ( .Actor:Enemy3 *VarA *VarB *VarC )
			Call SetHomePos ( .Actor:Enemy3 *VarA *VarB *VarC )
			Call HPBarToHome ( .Actor:Enemy3 )
			
			Thread
				Call SetActorSpeed ( .Actor:Enemy3 *Fixed[8.0] )
				Call RunToGoal ( .Actor:Enemy3 0` .False )
			EndThread
			
			Wait 1`
			Call SetActorSpeed ( .Actor:Enemy2 *Fixed[8.0] )
			Call RunToGoal ( .Actor:Enemy2 0` .False )
			
			Call UseIdleAnimation ( .Actor:Enemy1 .True )
			Call RemoveActor ( .Actor:Self )
			Return
		Case  ==  .Event:EndFirstStrike % 35
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[2.0] )
			Call  SetAnimation  ( .Actor:Self 00000001 00260003 )
			Call  SetGoalToHome ( .Actor:Self )
			Call  SetActorSpeed ( .Actor:Self *Fixed[4.0] )
			Call  RunToGoal     ( .Actor:Self  0` .False )
			Call  SetAnimationRate  ( .Actor:Self 00000001 *Fixed[1.0] )
			Call  HPBarToHome   ( .Actor:Self )
		Case  ==  .Event:RecoverStatus % 31
			SetConst  *Var0  00000001
			SetConst  *Var1  00260001
			ExecWait  DoRecover
		Case  ==  .Event:ScareAway % 39
			SetConst  *Var0  00000001
			SetConst  *Var1  00260003
			SetConst  *Var2  00260005
			ExecWait  DoScareAway
			Return
		Case  ==  .Event:BeginAirLift % 3A
			SetConst  *Var0  00000001
			SetConst  *Var1  00260003
			ExecWait  DoAirLift
		Case  ==  .Event:BlowAway % 16
			SetConst  *Var0  00000001
			SetConst  *Var1  00260005
			ExecWait  DoBlowAway
			Return
		Default
	EndSwitch
	Call  SetAnimation      ( .Actor:Self 00000001 00260001 )
	Call  EnableIdleScript  ( .Actor:Self 00000001 )
	Call  UseIdleAnimation  ( .Actor:Self .True )
	Return
	End
}

% Ghost Luigi
#new:Actor $GhostLuigi
{
	% stats
	[Index]         D5b
	[Level]         40`b
	% [MaxHP]         30`b
	[MaxHP]         30`b
	[Coins]         1`b
	[Flags]       00000000
	[StatusTable] $StatusTable_8021975C
	% ai
	[PartsCount]    1`s
	[PartsTable]  $PartsTable_GhostLuigi
	[Script]      $Script_Init_GhostLuigi
	% move effectiveness
	[Escape]       90`b
	[Item]        100`b
	[AirLift]     100`b
	[Hurricane]    90`b % Bow's "Spook" as well
	[UpAndAway]    95`b
	[PowerBounce] 80`b
	[SpinSmash]     0`b % weight (0-4)
	% ui positions
	[Size]         24`b  24`b % width height
	[HealthBar]     0`b   0`b % dx dy
	[StatusTurn]  -10`b  20`b % dx dy
	[StatusIcon]   10`b  20`b % dx dy
}

#new:PartsTable $PartsTable_GhostLuigi {
	00820001 01000000 002C00B0 $IdleAnimations_Luigi $DefenseTable_Luigi 00000000 00000000 00F60000 00000000
	% 00120001 02000000 001800FF $IdleAnimations_Projectile $DefenseTable_Projectile 00000000 00000000 FFF60000 00000000
	% 00120001 03000000 001800FF $IdleAnimations_Projectile $DefenseTable_Projectile 00000000 00000000 FFF60000 00000000
}

#new:Script $Script_Init_GhostLuigi {
	Call BindTakeTurn ( .Actor:Self $Script_TakeTurn_GhostLuigi )
	Call BindIdle ( .Actor:Self $Script_Idle_Luigi )
	Call BindNextTurn ( .Actor:Self $Script_NextTurn_GhostLuigi )
	Call BindHandleEvent ( .Actor:Self $Script_HandleEvent_Luigi )
	
	Call SetActorVar ( .Actor:Self 0` 0` ) % Var 0: next attack - 0`: jump, 1`: thunder
	Call SetActorVar ( .Actor:Self 1` .False ) % Var 1: enabled - .True, .False
	Return
	End
}

#new:Script $Script_TakeTurn_GhostLuigi {
	Call UseIdleAnimation ( .Actor:Self .False )
	Call EnableIdleScript ( .Actor:Self .False )
	
	Call SetAnimation ( .Actor:Self 1` .Animation:AboutToJump )
	Wait 10`
	Call SetAnimation ( .Actor:Self 1` .Animation:Jumping )
	
	Thread
		Wait 15`
		Call SetAnimation ( .Actor:Self 1` .Animation:Sitting )
	EndThread
	
	Call SetGoalToHome ( .Actor:Self )
	Call SetActorJumpGravity ( .Actor:Self *Fixed[0.4] )
	Call JumpToGoal ( .Actor:Self 40` .False .False .False )
	
	Thread
		Loop 4
			Call TranslateGroup ( ~Model:waa_bt01:dai 0` 4` 0` )
			Call AddActorPos ( .Actor:Self 0` 4` 0` )
			Wait 4`
			Call TranslateGroup ( ~Model:waa_bt01:dai 0` 0` 0` )
			Call AddActorPos ( .Actor:Self 0` -4` 0` )
			Wait 4`
		EndLoop
	EndThread
	
	Call SetTargetActor ( .Actor:Self .Actor:Player )
	Call SetGoalToTarget ( .Actor:Self )
	
	Call EnemyTestTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000003 00000010 )
	Switch *Var0
		CaseOR == .HitResult:Miss
		CaseOR == .HitResult:Lucky
			Call SetGoalToHome ( .Actor:Player )
			Call SetActorJumpGravity ( .Actor:Player *Fixed[0.4] )
			Call SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00010009 )
			Call JumpToGoal ( .Actor:Player 40` .True .True .False )
			
			Call UseIdleAnimation ( .Actor:Self .True )
			Call EnableIdleScript ( .Actor:Self .True )
			Return
		EndCaseGroup
	EndSwitch
	
	Thread
		Wait 5`
		Call UseIdleAnimation ( .Actor:Enemy3 .False )
		Call EnableIdleScript ( .Actor:Enemy3 .False )
		
		Call SetAnimation ( .Actor:Enemy3 1` 00550010 )
		Call SetGoalToHome ( .Actor:Enemy3 )
		Call SetActorJumpGravity ( .Actor:Enemy3 *Fixed[0.4] )
		Call JumpToGoal ( .Actor:Enemy3 40` .False .False .False )
		
		Call UseIdleAnimation ( .Actor:Enemy3 .True )
		Call EnableIdleScript ( .Actor:Enemy3 .True )
	EndThread
	
	Thread
		Wait 7`
		Call UseIdleAnimation ( .Actor:Enemy2 .False )
		Call EnableIdleScript ( .Actor:Enemy2 .False )
		
		Call SetAnimation ( .Actor:Enemy2 1` 00550010 )
		Call SetGoalToHome ( .Actor:Enemy2 )
		Call SetActorJumpGravity ( .Actor:Enemy2 *Fixed[0.4] )
		Call JumpToGoal ( .Actor:Enemy2 40` .False .False .False )
		
		Call UseIdleAnimation ( .Actor:Enemy2 .True )
		Call EnableIdleScript ( .Actor:Enemy2 .True )
	EndThread
	
	Thread
		Call SetGoalToHome ( .Actor:Partner )
		Call SetActorJumpGravity ( .Actor:Partner *Fixed[0.4] )
		Call JumpToGoal ( .Actor:Partner 40` .False .False .False )
	EndThread
	
	Wait 1`
	Call SetGoalToHome ( .Actor:Player )
	Call SetActorJumpGravity ( .Actor:Player *Fixed[0.4] )
	Call JumpToGoal ( .Actor:Player 40` .False .False .False )
	
	Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 0000FFFF 00000000 00000003 00000020 )
	
	Switch *Var0 
		CaseOR == .HitResult:Hit
		CaseOR == .HitResult:QuakeImmune
			Call SetTargetActor ( .Actor:Self .Actor:Partner )
			Call SetGoalToTarget ( .Actor:Self )
			
			Call EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 0000FFFF 00000000 00000001 00000020 )
		EndCaseGroup
	EndSwitch
	
	Call UseIdleAnimation ( .Actor:Self .True )
	Call EnableIdleScript ( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_Idle_GhostLuigi {
	Loop
		Wait 1`
	EndLoop
	Return
	End
}

#new:Script $Script_NextTurn_GhostLuigi {
	Return
	End
}

% Custom Stage

#new:Stage $Stage_Luimgi {
	"arn_tex"
	"waa_bt01_shape"
	"waa_bt01_hit"
	$Script_BeforeBattle_Luimgi
	$Script_AfterBattle_Luimgi
	"hos_bg"
	$ForegroundModelList_Luimgi
	00000000
	00000000
	00000000
}

#new:ForegroundModelList $ForegroundModelList_Luimgi {
	00000000
}

#new:Script $Script_BeforeBattle_Luimgi {
	% VarA - shooting star model group, VarB - speed
	Set *VarA ~Model:waa_bt01:Shooting0
	Set *VarB 8`
	Exec $Script_MoveShootingStar
	
	Set *VarA ~Model:waa_bt01:Shooting1
	Set *VarB 8`
	Exec $Script_MoveShootingStar
	
	Return
	End
}

#new:Script $Script_MoveShootingStar
{
	Wait 30`
	Loop
		% Decide every frame randomly if it should fall down
		Loop
			Call RandInt ( 1000` *Var2 )
			If *Var2 == 1`
				BreakLoop
			EndIf
			Wait 1`
		EndLoop
		
		% TODO: play shooting star sound?
		
		% Set starting position
		Call RandInt ( 380` *Var0 )
		Sub *Var0 280`
		Set *Var1 0`
		
		% Fall down
		Loop 120`
			Add *Var0 *VarB
			Sub *Var1 *VarB
			Call  TranslateGroup ( *VarA *Var0 *Var1 0` )
			Wait 1`
		EndLoop
	EndLoop
	Return
	End
}

#new:Script $Script_AfterBattle_Luimgi {
	Return
	End
}

% Custom Formation

#new:Stage $Stage_abc {
	"arn_tex"
	"waa_bt02_shape"
	"waa_bt02_hit"
	$Script_BeforeBattle_Luimgi
	$Script_AfterBattle_8022BACC
	"nok_bg"
	$ForegroundModelList_8022BADC
	00000000
	00000000
	00000000
}

@ $FormationTable {
	$SJIS_8022BE10 00000002 $Formation_00 $Stage_8022BAEC 00000000
	$SJIS_8022BDF8 00000002 $Formation_01 $Stage_8022BAEC 00000000
	$SJIS_8022BDE8 00000002 $Formation_02 $Stage_8022BAEC 00000000
	$SJIS_8022BDCC 00000002 $Formation_03 $Stage_8022BAEC 00000000
	$SJIS_8022BDBC 00000002 $Formation_04 $Stage_8022BAEC 00000000
	$SJIS_8022BDA0 00000003 $Formation_05 $Stage_8022BAEC 00000000
	$SJIS_8022BD90 00000003 $Formation_06 $Stage_8022BAEC 00000000
	$SJIS_8022BD80 00000004 $Formation_07 $Stage_8022BAEC 00000000
	$SJIS_8022BD6C 00000002 $Formation_08 $Stage_8022BAEC 00000000
	$SJIS_8022BD60 00000002 $Formation_09 $Stage_8022BAEC 00000000
	$SJIS_8022BD54 00000003 $Formation_0A $Stage_8022BAEC 00000000
	$SJIS_8022BD3C 00000002 $Formation_0B $Stage_8022BAEC 00000000
	$SJIS_8022BD24 00000003 $Formation_0C $Stage_8022BAEC 00000000
	$SJIS_8022BD08 00000003 $Formation_0D $Stage_8022BAEC 00000000
	$SJIS_8022BCEC 00000003 $Formation_0E $Stage_8022BAEC 00000000
	$SJIS_8022BCC8 00000003 $Formation_0F $Stage_8022BAEC 00000000
	$SJIS_8022BCA0 00000004 $Formation_10 $Stage_8022BAEC 00000000
	$SJIS_8022BC94 00000002 $Formation_11 $Stage_8022BAEC 00000000
	$SJIS_8022BC80 00000002 $Formation_12 $Stage_8022BAEC 00000000
	$SJIS_8022BC5C 00000003 $Formation_13 $Stage_8022BAEC 00000000
	$SJIS_8022BC38 00000004 $Formation_14 $Stage_8022BAEC 00000000
	$SJIS_8022BC2C 00000001 $Formation_15 $Stage_8022BAEC 00000000
	$SJIS_8022BC1C 00000002 $Formation_16 $Stage_8022BAEC 00000000
	$SJIS_8022BC0C 00000004 $Formation_17 $Stage_8022BAEC 00000000
	$SJIS_8022BC00 00000001 $Formation_18 $Stage_8022BAEC 00000000
	$SJIS_Formation_19 00000002 $Formation_19 $Stage_Luimgi 00000000
	00000000 00000000 00000000 00000000 00000000
}

#new:Formation $Formation_19 {
	% actor type - id - ??
	$Luigi 2` 10` 00000000 00000000 00000000 00000000
	$GhostLuigi 2` 9` 00000000 00000000 00000000 00000000
}

#new:SJIS $SJIS_Formation_19 {
	luim. gi
}
